import java.io.*;
import java.util.ArrayList;
import java.util.Scanner;

public class Main {
    static Scanner scanner = new Scanner(System.in);
    static int minLength = -1;
    static int minimumSpecialCharacters;
    static int minimumNumbers;
    static int minimumLetters;
    static boolean requirementsDefined = false;

    static String specialCharactersString;


    public static void main(String[] args) throws IOException {
        System.out.println("Welcome to the Password generator program!");
        // load requirements from requirements.dat if it exists using FileReader and BufferedReader
        // File has format: minLength, minimumSpecialCharacters, minimumNumbers, minimumLetters. Separated by newlines.

        // if requirements.dat does not exist, clear file
        String line = null;
        FileReader fileReader = null;
        BufferedReader bufferedReader = null;
        try {
            fileReader = new FileReader("requirements.dat");
            bufferedReader = new BufferedReader(fileReader);
            line = bufferedReader.readLine();
        } catch (FileNotFoundException e) {
            System.out.println("File requirements.dat not found.");
        }
        while (line != null) {
            try {
                minLength = Integer.parseInt(line);
                minimumSpecialCharacters = Integer.parseInt(bufferedReader.readLine());
                minimumNumbers = Integer.parseInt(bufferedReader.readLine());
                minimumLetters = Integer.parseInt(bufferedReader.readLine());
                specialCharactersString = bufferedReader.readLine();
                requirementsDefined = true;
            } catch (NumberFormatException e) {
                break;
            }

        }


        chooseUserType();

    }

    private static void chooseUserType() {
        System.out.println("\nCurrent user types:");
        System.out.println("1. Administrator");
        System.out.println("2. User");
        System.out.println();
        System.out.print("Please enter the user type (1 or 2): ");
        boolean isUserTypeValid = false;
        int userType = 0;
        String userTypeInput = null;
        while (!isUserTypeValid) {
            try {
                userTypeInput = scanner.nextLine();
                userType = Integer.parseInt(userTypeInput);
                if (userType == 1 || userType == 2) {
                    isUserTypeValid = true;
                } else {
                    System.out.print("Invalid user type. Please enter the user type (1 or 2): ");
                }
            } catch (NumberFormatException e) {
                System.out.print("Invalid user type. Please enter the user type (1 or 2): ");
            }

        }
        // clear screen
        System.out.print("\033[H\033[2J");
        System.out.flush();
        System.out.println();

        if (userType == 1) {
            System.out.println("Welcome to the Administrator menu!");
            adminMenu();
        } else {
            System.out.println("Welcome to the User menu!");
            userMenu();
        }
    }


    private static void adminMenu() {

        System.out.println("\nCurrent options:");
        System.out.println("1. Define a set of requirements for passwords");
        System.out.println("2. Audit generated passwords");
        System.out.println("3. Change user type");
        System.out.println("4. Exit");
        System.out.println();

        System.out.print("Please enter the option (1, 2, 3, or 4): ");
        boolean isOptionValid = false;
        int option = 0;
        String optionInput = null;
        while (!isOptionValid) {
            try {
                optionInput = scanner.nextLine();
                option = Integer.parseInt(optionInput);
                if (option == 1 || option == 2 || option == 3 || option == 4) {
                    isOptionValid = true;
                } else {
                    System.out.print("Invalid option. Please enter the option (1, 2, 3, or 4): ");
                }
            } catch (NumberFormatException e) {
                System.out.print("Invalid option. Please enter the option (1, 2, 3, or 4): ");
            }

        }

        if (option == 1) {
            defineRequirements();

        } else if (option == 2) {
            auditPasswords();
        } else if (option == 3) {
            chooseUserType();
            return;
        } else {
            System.out.println("Thank you for using the Password generator program!");
            System.exit(0);
        }
        adminMenu();


    }

    private static void auditPasswords() {
        if (!requirementsDefined) {
            System.out.println("You must define requirements before auditing passwords.");
            return;
        }
        // read generated passwords from generatedPasswords.dat
        // if generatedPasswords.dat does not exist, clear file
        ArrayList<String> generatedPasswords = new ArrayList<>();

        try {
            FileReader fileReader = new FileReader("generatedPasswords.dat");
            BufferedReader bufferedReader = new BufferedReader(fileReader);
            String line = bufferedReader.readLine();
            while (line != null) {
                generatedPasswords.add(line);
                line = bufferedReader.readLine();
            }
        } catch (IOException e) {
            System.out.println("No generated passwords to audit.");
            return;
        }

        if (generatedPasswords.size() == 0) {
            System.out.println("No passwords have been generated yet.");
            return;
        }
        System.out.println("Generated passwords:");
        for (int i = 0; i < generatedPasswords.size(); i++) {
            System.out.println((i + 1) + ". " + generatedPasswords.get(i));
        }
    }

    private static void defineRequirements() {
        System.out.print("1. Enter the minimum length for the password: ");
        boolean isMinLengthValid = false;
        minLength = 0;
        String minLengthInput = null;
        while (!isMinLengthValid) {
            try {
                minLengthInput = scanner.nextLine();
                minLength = Integer.parseInt(minLengthInput);
                if (minLength > 1) {
                    isMinLengthValid = true;
                } else {
                    System.out.print("Invalid minimum length. Please a length greater than 1: ");
                }
            } catch (NumberFormatException e) {
                System.out.print("Invalid minimum length. Please enter the minimum length for the password: ");
            }
        }
        boolean validMinimums = false;
        while (!validMinimums) {
            // get number of special characters, numbers, and letters.
            System.out.print("2. Enter the minimum number of special characters: ");
            boolean isSpecialCharactersValid = false;
            minimumSpecialCharacters = 0;
            String specialCharactersInput = null;
            while (!isSpecialCharactersValid) {
                try {
                    specialCharactersInput = scanner.nextLine();
                    minimumSpecialCharacters = Integer.parseInt(specialCharactersInput);
                    if (minimumSpecialCharacters >= 0) {
                        isSpecialCharactersValid = true;
                    } else {
                        System.out.print("Invalid number of special characters. Please enter a number greater than or equal to 0: ");
                    }
                } catch (NumberFormatException e) {
                    System.out.print("Invalid number of special characters. Please enter the number of special characters: ");
                }
            }
            System.out.print("3. Enter the minimum number of numbers: ");
            boolean isNumbersValid = false;

            minimumNumbers = 0;
            String numbersInput = null;
            while (!isNumbersValid) {
                try {
                    numbersInput = scanner.nextLine();
                    minimumNumbers = Integer.parseInt(numbersInput);
                    if (minimumNumbers >= 0) {
                        isNumbersValid = true;
                    } else {
                        System.out.print("Invalid number of numbers. Please enter a number greater than or equal to 0: ");
                    }
                } catch (NumberFormatException e) {
                    System.out.print("Invalid number of numbers. Please enter the number of numbers: ");
                }
            }

            System.out.print("4. Enter the minimum number of letters: ");
            boolean isLettersValid = false;

            minimumLetters = 0;
            String lettersInput = null;
            while (!isLettersValid) {
                try {
                    lettersInput = scanner.nextLine();
                    minimumLetters = Integer.parseInt(lettersInput);
                    if (minimumLetters >= 0) {
                        isLettersValid = true;
                    } else {
                        System.out.print("Invalid number of letters. Please enter a number greater than or equal to 0: ");
                    }
                } catch (NumberFormatException e) {
                    System.out.print("Invalid number of letters. Please enter the number of letters: ");
                }
            }
            if (minimumSpecialCharacters == 0 && minimumNumbers == 0 && minimumLetters == 0) {
                System.out.println("Invalid requirements. Please there should be at least one of any of the following: special characters, numbers, letters.");

            } else {
                validMinimums = true;
            }
        }

        if (minimumSpecialCharacters > 0) {

            System.out.print("5. Enter valid special characters for the password: ");
            boolean validSpecialCharacters = false;
            specialCharactersString = null;
            while (!validSpecialCharacters) {
                specialCharactersString = scanner.nextLine();
                if (specialCharactersString.length() == 0) {
                    System.out.println("Please enter at least one special character.");
                } else {
                    validSpecialCharacters = true;
                }
            }
        }
        requirementsDefined = true;

        // write new requirements to requirements.dat using FileWrite
        try {
            FileWriter fileWriter = new FileWriter("requirements.dat");
            fileWriter.write(minLength + "\n");
            fileWriter.write(minimumSpecialCharacters + "\n");
            fileWriter.write(minimumNumbers + "\n");
            fileWriter.write(minimumLetters + "\n");
            fileWriter.write(specialCharactersString + "\n");
            fileWriter.close();
        } catch (IOException e) {
            System.out.println("Error writing to requirements.dat. Requirements not saved to file.");
        }

        System.out.println("\nRequirements successfully defined.");


    }

    /*
    As a user, I would like the program to generate a secure password that passes all the requirements.
    As a user, I would like to input a password for the program to check against the requirements
    and list which requirement(s) are not met, if any.
    */
    private static void userMenu() {
        System.out.println("\nCurrent options:");
        System.out.println("1. Generate a password");
        System.out.println("2. Check a password");
        System.out.println("3. Change user type");
        System.out.println("4. Exit");
        System.out.println();

        System.out.print("Please enter the option (1, 2, 3, or 4): ");
        boolean isOptionValid = false;
        int option = 0;
        String optionInput = null;
        while (!isOptionValid) {
            try {
                optionInput = scanner.nextLine();
                option = Integer.parseInt(optionInput);
                if (option == 1 || option == 2 || option == 3 || option == 4) {
                    isOptionValid = true;
                } else {
                    System.out.print("Invalid option. Please enter the option (1, 2, 3, or 4): ");
                }
            } catch (NumberFormatException e) {
                System.out.print("Invalid option. Please enter the option (1, 2, 3, or 4): ");
            }

        }

        if (option == 1) {
            generatePassword();
        } else if (option == 2) {
            checkPassword();
        } else if (option == 3) {
            chooseUserType();
            return;
        } else {
            System.out.println("Thank you for using the Password generator program!");
            System.exit(0);
        }

        userMenu();


    }

    private static void checkPassword() {
        // read password from user
        System.out.print("Please enter the password to check: ");
        String password = scanner.nextLine();
        // check password against requirements
        // print out the requirements that are not met
        boolean isPasswordValid = true;
        if (password.length() < minLength) {
            System.out.println("Password does not meet the minimum length requirement. (minimum: " + minLength + ", actual: " + password.length() + ")");
            isPasswordValid = false;
        }
        int specialCharacters = 0;
        int numbers = 0;
        int letters = 0;
        for (int i = 0; i < password.length(); i++) {
            char c = password.charAt(i);
            if (specialCharactersString.indexOf(c) != -1) {
                specialCharacters++;
            } else if (Character.isDigit(c)) {
                numbers++;
            } else if (Character.isLetter(c)) {
                letters++;
            }
        }
        if (specialCharacters < minimumSpecialCharacters) {
            System.out.println("Password does not meet the minimum number of special characters requirement. (minimum: " + minimumSpecialCharacters + ", actual: " + specialCharacters + "). " + " Valid Special characters: " + specialCharactersString);
            isPasswordValid = false;
        }
        if (numbers < minimumNumbers) {
            System.out.println("Password does not meet the minimum number of numbers requirement. (minimum: " + minimumNumbers + ", actual: " + numbers + ")");
            isPasswordValid = false;
        }
        if (letters < minimumLetters) {
            System.out.println("Password does not meet the minimum number of letters requirement. (minimum: " + minimumLetters + ", actual: " + letters + ")");
            isPasswordValid = false;
        }
        if (isPasswordValid) {
            System.out.println("All requirements are met. Password is valid.");
        }
    }

    private static void generatePassword() {
        if (!requirementsDefined) {
            System.out.println("Please define the requirements first.");
            return;
//            adminMenu();
        }
        StringBuilder password = new StringBuilder();
        String letters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
        String numbers = "0123456789";

        for (int i = 0; i < minimumLetters; i++) {
            password.append(letters.charAt((int) (Math.random() * letters.length())));
        }
        for (int i = 0; i < minimumNumbers; i++) {
            password.append(numbers.charAt((int) (Math.random() * numbers.length())));
        }
        for (int i = 0; i < minimumSpecialCharacters; i++) {
            password.append(specialCharactersString.charAt((int) (Math.random() * specialCharactersString.length())));
        }

        // generate random length for the password between minLength and minLength + 10
        int randomLength = (int) (Math.random() * 10) + minLength;
        // generate random characters for the password to make it up to the random length
        String availableCharacters = letters + numbers + specialCharactersString;
        for (int i = 0; i < randomLength - password.length(); i++) {
            password.append(availableCharacters.charAt((int) (Math.random() * availableCharacters.length())));
        }
        System.out.println("Generated password: " + password);
        // add the generated password to generatedPasswords.dat
        try {
            FileWriter fileWriter = new FileWriter("generatedPasswords.dat", true);
            fileWriter.write(password + "\n");
            fileWriter.close();
        } catch (IOException e) {
            System.out.println("Error writing to generatedPasswords.dat. Password not saved to file.");
        }
    }
}
